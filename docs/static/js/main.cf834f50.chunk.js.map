{"version":3,"sources":["Form.Component.jsx","App.js","serviceWorker.js","index.js"],"names":["FormComponent","state","emailList","email","message","handleUpload","event","a","file","target","files","reader","FileReader","onloadstart","document","getElementById","innerText","onload","setState","JSON","parse","result","readAsText","handleChange","e","name","value","this","Container","Row","Col","xs","lg","className","Card","Header","as","Body","InputGroup","FormControl","placeholder","aria-label","aria-describedby","defaultValue","onChange","type","accept","Button","variant","id","map","item","index","key","length","Form","Group","controlId","Control","rows","PureComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAwFeA,E,2MApFXC,MAAQ,CAAEC,UAAW,GAAIC,MAAO,GAAIC,QAAS,K,EAC7CC,a,uCAAe,WAAOC,GAAP,iBAAAC,EAAA,sDACPC,EAAOF,EAAMG,OAAOC,MAAM,IAC1BC,EAAS,IAAIC,YACVC,YAAP,uCAAqB,WAAOP,GAAP,SAAAC,EAAA,sDACjBO,SAASC,eAAe,UAAUC,UAAY,uBAD7B,2CAArB,sDAGAL,EAAOM,OAAP,uCAAgB,WAAOX,GAAP,SAAAC,EAAA,sEAEN,EAAKW,SAAS,CAAEhB,UAAWiB,KAAKC,MAAMd,EAAMG,OAAOY,UAF7C,OAGZP,SAASC,eAAe,UAAUC,UAAY,GAHlC,2CAAhB,sDAMAL,EAAOW,WAAWd,GAZP,2C,wDAefe,a,uCAAe,WAAOC,GAAP,SAAAjB,EAAA,sEACL,EAAKW,SAAL,eAAiBM,EAAEf,OAAOgB,KAAOD,EAAEf,OAAOiB,QADrC,2C,8HAGL,IACExB,EAAcyB,KAAK1B,MAAnBC,UACR,OACI,6BACI,6BACI,kBAAC0B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,KAAKC,UAAU,OACtB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,GAAG,MAAhB,aACA,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,YAAY,uBACZC,aAAW,uBACXC,mBAAiB,eACjBjB,KAAK,QACLkB,aAAchB,KAAK1B,MAAME,MACzByC,SAAUjB,KAAKJ,eAEnB,yBAAKU,UAAU,gBACX,yBAAKA,UAAU,eACX,4BAAQY,KAAK,SAASZ,UAAU,mBAAhC,UACA,2BAAOR,KAAK,OAAOoB,KAAK,OAAOD,SAAUjB,KAAKtB,aAAcyC,OAAO,sBAEvE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,SAGR,6BAAK,oCAAL,+DAEA,6BACA,yBAAKC,GAAG,SAAShB,UAAU,gBAC3B,yBAAKA,UAAU,qCACV/B,GAAaA,EAAUgD,KAAI,SAACC,EAAMC,GAAP,OAAiB,0BAAMC,IAAKD,GAAQD,EAAKhD,UACpED,GAAkC,IAArBA,EAAUoD,OAAe,mCAAqC,QAMhG,kBAACzB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,KAAKC,UAAU,OACtB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,CAAaC,GAAG,MAAhB,WACA,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACkB,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAElB,kBAACF,EAAA,EAAKG,QAAN,CAActB,GAAG,WAAWX,KAAK,UAAUkC,KAAK,IAAIhB,aAAchB,KAAK1B,MAAMG,QAASwC,SAAUjB,KAAKJ,oBAMzH,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,KAAKC,UAAU,kBACtB,kBAACc,EAAA,EAAD,CAAQC,QAAQ,WAAhB,yB,GA3EJY,iBCUbC,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCIc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStD,SAASC,eAAe,SD2H3C,kBAAmBsD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf834f50.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Card, Button, Container, Row, Col, InputGroup, FormControl, Form } from 'react-bootstrap';\r\n\r\nclass FormComponent extends PureComponent {\r\n    state = { emailList: [], email: \"\", message: \" \" };\r\n    handleUpload = async (event) => {\r\n        var file = event.target.files[0];\r\n        var reader = new FileReader();\r\n        reader.onloadstart = async (event) => {\r\n            document.getElementById(\"status\").innerText = \"Loading file data...\";\r\n        };\r\n        reader.onload = async (event) => {\r\n            // The file's text will be printed here\r\n            await this.setState({ emailList: JSON.parse(event.target.result) })\r\n            document.getElementById(\"status\").innerText = \"\";\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    handleChange = async (e) => {\r\n        await this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    render() {\r\n        const { emailList } = this.state;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xs lg=\"10\" className=\"m_c\">\r\n                                <Card>\r\n                                    <Card.Header as=\"h5\">Add Email</Card.Header>\r\n                                    <Card.Body>\r\n                                        <InputGroup>\r\n                                            <FormControl\r\n                                                placeholder=\"Recipient's username\"\r\n                                                aria-label=\"Recipient's username\"\r\n                                                aria-describedby=\"basic-addon2\"\r\n                                                name=\"email\"\r\n                                                defaultValue={this.state.email}\r\n                                                onChange={this.handleChange}\r\n                                            />\r\n                                            <div className=\"Browse_group\">\r\n                                                <div className=\"choose_file\">\r\n                                                    <button type=\"button\" className=\"btn btn-default\">Browse</button>\r\n                                                    <input name=\"file\" type=\"file\" onChange={this.handleUpload} accept=\"application/JSON\" />\r\n                                                </div>\r\n                                                <Button variant=\"outline-secondary\">ADD</Button>\r\n                                            </div>\r\n                                        </InputGroup>\r\n                                        <sub><b>Note:</b> Use above \"Browse\" option to import emails from Json Files</sub>\r\n                                        {/* Display Section */}\r\n                                        <hr />\r\n                                        <div id=\"status\" className=\"text-center\"></div>\r\n                                        <div className=\"displayGrid pt-2 pb-2 text-center\">\r\n                                            {emailList && emailList.map((item, index) => <span key={index}>{item.email}</span>)}\r\n                                            {emailList && emailList.length === 0 ? \"Please add an email to show here\" : \"\"}\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs lg=\"10\" className=\"m_c\">\r\n                                <Card>\r\n                                    <Card.Header as=\"h5\">Message</Card.Header>\r\n                                    <Card.Body>\r\n                                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                            {/* <Form.Label>Example textarea</Form.Label> */}\r\n                                            <Form.Control as=\"textarea\" name=\"message\" rows=\"5\" defaultValue={this.state.message} onChange={this.handleChange} />\r\n                                        </Form.Group>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs lg=\"10\" className=\"m_c text-right\">\r\n                                <Button variant=\"primary\">Send Message</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\nimport './App.css';\n//import Form from './Form.Component';\nimport FormComponent from './Form.Component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormComponent/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}